# Copyright Laserfiche.
# Licensed under the MIT License. See LICENSE in the project root for license information.

name: lf-api-client-core-js-CI

on:
  push:
    branches: ['\d+.x']
  pull_request:
    branches: ['\d+.x']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NPM_VERSION: '1.1.12'
  GITHUB_PAGES_BRANCH: 'gh-pages'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: dummy
      NPM_USERNAME: dummy
      NPM_EMAIL: dummy
      NPM_REGISTRY: dummy
    steps:
      - uses: actions/checkout@v4

      - name: Echo build number
        run: echo ${{github.run_id}}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

      - name: PNPM run build
        run: pnpm run build --filter @laserfiche/lf-api-client-core

      - name: Echo NPM package version
        run: echo ${{ env.NPM_VERSION }}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-publish-artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ./packages/lf-api-client-core-js/dist
            ./packages/lf-api-client-core-js/package.json
            ./packages/lf-api-client-core-js/README.md
            ./LICENSE


  test:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v4

      - name: Echo build number
        run: echo ${{github.run_id}}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

      - name: Npm test on cloud
        id: test-cloud
        env:
          ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
          ACCESS_KEY_JSON: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY_JSON }}
          SERVICE_PRINCIPAL_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY }}
        run: pnpm --filter @laserfiche/lf-api-client-core run test:Cloud

      - name: Npm test on self-hosted
        if: always() && (steps.test-cloud.outcome == 'success' || steps.test-cloud.outcome == 'failure')
        env:
          REPOSITORY_ID: ${{ secrets.APISERVER_REPOSITORY_ID }}
          APISERVER_USERNAME:  ${{ secrets.APISERVER_USERNAME }}
          APISERVER_PASSWORD:  ${{ secrets.APISERVER_PASSWORD }}
          APISERVER_REPOSITORY_API_BASE_URL:  ${{ secrets.APISERVER_REPOSITORY_API_BASE_URL }}
        run: pnpm --filter @laserfiche/lf-api-client-core run test:SelfHosted

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Jest Test Results
          path: ./packages/lf-api-client-core-js/*.xml
          reporter: jest-junit
          only-summary: "false"
          list-tests: "failed"
          fail-on-error: "false"


  build-documentation:
    runs-on: ubuntu-latest
    needs: [ build, test ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

      - name: Install typedoc
        working-directory: ./packages/lf-api-client-core-js
        run: pnpm install typedoc

      - name: Create temporary directory
        working-directory: ./packages/lf-api-client-core-js
        run: mkdir -p ./docs_temp/${{ github.ref_name }}

      - name: Generate typedoc docs
        working-directory: ./packages/lf-api-client-core-js
        run: npx typedoc ./index.ts --out ./docs_temp/${{ github.ref_name }} --excludePrivate --includeVersion

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./packages/lf-api-client-core-js/docs_temp/${{ github.ref_name }}

      - name: delete temporary directory
        run: rm -r ./packages/lf-api-client-core-js/docs_temp

  publish-preview-package:
    runs-on: ubuntu-latest
    environment: preview
    if: ${{ github.run_attempt != 1 }}
    needs: [ build, test, build-documentation ] # wait for build to finish
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-publish-artifact

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: ls
        run: ls

      - name: Install pnpm
        run: npm install pnpm -g

      - name: set NpmPackageVersion as preview version from downloaded artifact
        run: echo "NpmPackageVersion=${{ env.NPM_VERSION }}--preview-${{ github.run_id }}" >> $GITHUB_ENV

      - name: pnpm version
        run: pnpm version ${{ env.NpmPackageVersion }} --no-git-tag-version

      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: pnpm publish
        run: pnpm publish --filter @laserfiche/lf-api-client-core --access public  --tag next --no-git-checks

      - name: Tag commit
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.NpmPackageVersion }}
          commit_sha: ${{ github.sha }}
          message: Workflow run ${{github.server_url}}/${{github.repository}}/actions/runs/${{ github.run_id}}


  publish-production-package:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.run_attempt != 1 }}
    needs: [ build, test, build-documentation ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-publish-artifact

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install pnpm -g

      - name: pnpm version
        run: pnpm version ${{ env.NPM_VERSION }} --no-git-tag-version --allow-same-version

      - name: pnpm publish
        run: pnpm publish  --access public  --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Tag commit
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.NPM_VERSION }}
          commit_sha: ${{ github.sha }}
          message: Workflow run ${{github.server_url}}/${{github.repository}}/actions/runs/${{ github.run_id}}

  # NEED TO FIX DOCUMENTATION
  # publish-documentation:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   environment: github-pages
  #   needs: [ publish-production-package ]
  #   steps:
  #     - name: Set DOCUMENTATION_VERSION environment variable
  #       run: |
  #         if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
  #           echo 'DOCUMENTATION_VERSION=${{ github.base_ref }}' >> $GITHUB_ENV
  #         elif [[ '${{ github.ref_protected }}' == 'true' && '${{ github.ref_type }}' == 'branch' ]]; then
  #           echo 'DOCUMENTATION_VERSION=${{ github.ref_name }}' >> $GITHUB_ENV
  #         else
  #           echo '::error::Unable to publish documentation for the current branch.'
  #           exit 1
  #         fi

  #     - name: Print DOCUMENTATION_VERSION environment variable
  #       run: |
  #         echo 'Publishing documentation to ${{ env.GITHUB_PAGES_BRANCH }} for ${{ env.DOCUMENTATION_VERSION }}.'

  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ env.GITHUB_PAGES_BRANCH }}

  #     - name: Delete documentation directory
  #       run: rm -f -r ./docs/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Create documentation directory
  #       run: mkdir -p ./docs/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Download documentation build artifact
  #       uses: actions/download-artifact@v3.0.0
  #       with:
  #         name: documentation-artifact
  #         path: ./docs/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Create Pull Request
  #       uses: peter-evans/create-pull-request@v4.2.3
  #       with:
  #         branch: ${{ env.GITHUB_PAGES_BRANCH }}-${{ env.DOCUMENTATION_VERSION }}-patch
  #         delete-branch: true
  #         title: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
  #         commit-message: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
  #         body: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
  #         assignees: ${{ github.actor }}

