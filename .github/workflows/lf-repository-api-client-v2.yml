# Copyright Laserfiche.
# Licensed under the MIT License. See LICENSE in the project root for license information.

name: lf-repository-api-client-js-CI

on:
  push:
    branches:
      - v2
  pull_request:
    branches:
      - v2

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NPM_VERSION: '1.0.2'
  GITHUB_PAGES_BRANCH: 'gh-pages'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: dummy
      NPM_USERNAME: dummy
      NPM_EMAIL: dummy
      NPM_REGISTRY: dummy
    steps:
      - uses: actions/checkout@v4

      - name: Echo build number
        run: echo ${{github.run_id}}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

      - name: PNPM run build
        run: pnpm run build --filter @laserfiche/lf-repository-api-client-v2

      - name: Echo NPM package version
        run: echo ${{ env.NPM_VERSION }}

      - name: Copy license
        run: cp ./LICENSE ./packages/lf-repository-api-client-v2/LICENSE

      - name: Upload a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-publish-artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ./packages/lf-repository-api-client-v2/dist
            ./packages/lf-repository-api-client-v2/package.json
            ./packages/lf-repository-api-client-v2/README.md
            ./packages/lf-repository-api-client-v2/LICENSE

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

# TODO remove unnecessary secrets
      - name: NPM test on cloud (node environment)
        id: test-cloud-node
        env:
          ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
          SERVICE_PRINCIPAL_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY }}
          REPOSITORY_ID: ${{ secrets.DEV_CA_PUBLIC_USE_REPOSITORY_ID_1 }}
          AUTHORIZATION_TYPE: ${{ secrets.AUTHORIZATION_TYPE }}
          TEST_HEADER: ${{ secrets.TEST_HEADER }}
        run: pnpm --filter @laserfiche/lf-repository-api-client-v2 run test:node

      - name: NPM test on cloud (browser environment)
        id: test-cloud-browser
        env:
          ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
          SERVICE_PRINCIPAL_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY }}
          REPOSITORY_ID: ${{ secrets.DEV_CA_PUBLIC_USE_REPOSITORY_ID_3 }}
          AUTHORIZATION_TYPE: ${{ secrets.AUTHORIZATION_TYPE }}
          TEST_HEADER: ${{ secrets.TEST_HEADER }}
        run: pnpm --filter @laserfiche/lf-repository-api-client-v2 run test:browser

      - name: Test report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Jest Test Results
          path: ./packages/lf-repository-api-client-v2/*.xml
          reporter: jest-junit
          only-summary: 'false'
          list-tests: 'failed'
          fail-on-error: 'false'

  build-documentation:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install pnpm -g

      - name: PNPM install
        run: pnpm install

      - name: PNPM run build
        run: pnpm run build --filter @laserfiche/lf-repository-api-client-v2

      - name: Install typedoc
        working-directory: ./packages/lf-repository-api-client-v2
        run: pnpm install typedoc

      - name: Create temporary directory
        working-directory: ./packages/lf-repository-api-client-v2
        run: mkdir -p ./docs_temp

      - name: Generate typedoc docs
        run: npx typedoc ./packages/lf-repository-api-client-v2/index.ts --out ./docs_temp --excludePrivate --includeVersion

      - name: Upload a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./packages/lf-repository-api-client-v2/docs_temp

      - name: Delete temporary directory
        run: rm -r ./packages/lf-repository-api-client-v2/docs_temp

  publish-preview-package:
    runs-on: ubuntu-latest
    environment: preview
    if: ${{ github.run_attempt != 1 }}
    needs: [build, test, build-documentation] # wait for build to finish
    steps:
      - name: Download a build artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-publish-artifact

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install pnpm -g

      - name: Set NpmPackageVersion as preview version from downloaded artifact
        run: echo "NpmPackageVersion=${{ env.NPM_VERSION }}--preview-${{ github.run_id }}" >> $GITHUB_ENV

      - name: PNPM version
        run: pnpm version ${{ env.NpmPackageVersion }} --no-git-tag-version

      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: PNPM publish
        run: pnpm publish --filter @laserfiche/lf-repository-api-client-v2 --access public  --tag next

      - uses: actions/checkout@v4

      - name: Tag commit
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.API_VERSION }}-${{ env.NpmPackageVersion }}
          commit_sha: ${{ github.sha }}
          message: Workflow run ${{github.server_url}}/${{github.repository}}/actions/runs/${{ github.run_id}}

  publish-production-package:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.run_attempt != 1 }}
    needs: [build, test, build-documentation]
    steps:
      - name: Download a build artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-publish-artifact

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        run: npm install pnpm -g

      - name: Set publishing config
        run: pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: PNPM version
        run: pnpm version ${{ env.NPM_VERSION }} --no-git-tag-version --allow-same-version

      - name: PNPM publish
        run: pnpm publish  --access public  --tag latest

      - uses: actions/checkout@v4

      - name: Tag commit
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.API_VERSION }}-${{ env.NPM_VERSION }}
          commit_sha: ${{ github.sha }}
          message: Workflow run ${{github.server_url}}/${{github.repository}}/actions/runs/${{ github.run_id}}

  # NEED TO FIGURE OUT DOCUMENTATION
  # publish-documentation:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   environment: github-pages
  #   needs: [publish-production-package]
  #   steps:
  #     - name: Set DOCUMENTATION_VERSION environment variable
  #       run: |
  #         npm_version=${{ env.NPM_VERSION }}
  #         major_version=${npm_version%%.*}
  #         documentation_version=$major_version.x
  #         echo $documentation_version
  #         echo DOCUMENTATION_VERSION=$documentation_version >> $GITHUB_ENV

  #     - name: Print DOCUMENTATION_VERSION environment variable
  #       run: |
  #         echo 'Publishing documentation to ${{ env.GITHUB_PAGES_BRANCH }} for ${{ env.API_VERSION }} ${{ env.DOCUMENTATION_VERSION }}.'

  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ env.GITHUB_PAGES_BRANCH }}

  #     - name: Delete documentation directory
  #       run: rm -f -r ./docs/${{ env.API_VERSION }}/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Create documentation directory
  #       run: mkdir -p ./docs/${{ env.API_VERSION }}/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Download documentation build artifact
  #       uses: actions/download-artifact@v3.0.0
  #       with:
  #         name: documentation-artifact
  #         path: ./docs/${{ env.API_VERSION }}/${{ env.DOCUMENTATION_VERSION }}

  #     - name: Create a pull request
  #       uses: peter-evans/create-pull-request@v4.2.3
  #       with:
  #         branch: ${{ env.GITHUB_PAGES_BRANCH }}-${{ env.API_VERSION }}-${{ env.DOCUMENTATION_VERSION }}-patch
  #         delete-branch: true
  #         title: 'Automated documentation update for ${{ env.API_VERSION }} ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}'
  #         commit-message: 'Automated documentation update for ${{ env.API_VERSION }} ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}'
  #         body: 'Automated documentation update for ${{ env.API_VERSION }} ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}'
  #         assignees: ${{ github.actor }}
